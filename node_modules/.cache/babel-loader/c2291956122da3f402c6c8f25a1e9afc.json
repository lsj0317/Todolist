{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wnsgm\\\\Desktop\\\\Dev\\\\project\\\\TodoList\\\\my-todo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './App.css';\nimport Template from './component/Template';\nimport TodoList from './component/TodoList';\nimport { MdAddCircle } from \"react-icons/md\";\nimport TodoInsert from \"./component/TodoInsert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet nextId = 4;\n\nconst App = () => {\n  _s();\n\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [insertToggle, setInsertToggle] = useState(false);\n  const [todos, setTodos] = useState([{\n    id: 1,\n    text: \"할일 1\",\n    checked: true\n  }, {\n    id: 2,\n    text: \"할일 2\",\n    checked: true\n  }, {\n    id: 3,\n    text: \"할일 3\",\n    checked: true\n  }]);\n\n  const onInsertToggle = () => {\n    if (selectedTodo) {\n      setSelectedTodo(null);\n    }\n\n    setInsertToggle(prev => !prev);\n  };\n\n  const onInsertTodo = text => {\n    if (text === \"\") {\n      // 만약 텍스트입력에 빈칸이 들어왔을때\n      return alert(\"할 일을 입력해주세요.\");\n    } else {\n      const todo = {\n        id: nextId,\n        text,\n        checked: false\n      };\n      setTodos(todos => todos.concat(todo));\n      nextId++;\n    }\n  };\n\n  const onCheckToggle = id => {\n    setTodos(todos => todos.map(todo => todo.id === id ? { ...todo,\n      checked: !todo.checked\n    } : todo));\n  };\n\n  const onChangeSelectedTodo = todo => {\n    setSelectedTodo(todo);\n  };\n\n  const onRemove = id => {\n    onInsertToggle();\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  };\n\n  const onUpdate = (id, text);\n  return /*#__PURE__*/_jsxDEV(Template, {\n    todoLength: todos.length,\n    children: [/*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      onCheckToggle: onCheckToggle,\n      onInsertToggle: onInsertToggle,\n      onChangeSelectedTodo: onChangeSelectedTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-todo-button\",\n      onClick: onInsertToggle,\n      children: /*#__PURE__*/_jsxDEV(MdAddCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), insertToggle && /*#__PURE__*/_jsxDEV(TodoInsert, {\n      selectedTodo: selectedTodo,\n      onInsertToggle: onInsertToggle,\n      onInsertTodo: onInsertTodo,\n      onRemove: onRemove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XnMcf6vxpT0uWN3qnb6FPi+sRvw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/wnsgm/Desktop/Dev/project/TodoList/my-todo/src/App.js"],"names":["React","useState","Template","TodoList","MdAddCircle","TodoInsert","nextId","App","selectedTodo","setSelectedTodo","insertToggle","setInsertToggle","todos","setTodos","id","text","checked","onInsertToggle","prev","onInsertTodo","alert","todo","concat","onCheckToggle","map","onChangeSelectedTodo","onRemove","filter","onUpdate","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport Template from './component/Template';\nimport TodoList from './component/TodoList';\nimport { MdAddCircle } from \"react-icons/md\";\nimport TodoInsert from \"./component/TodoInsert\";\n\nlet nextId = 4;\n\nconst App = () => {\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [insertToggle, setInsertToggle] = useState(false);\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: \"할일 1\",\n      checked: true\n    },\n    {\n      id: 2,\n      text: \"할일 2\",\n      checked: true\n    },\n    {\n      id: 3,\n      text: \"할일 3\",\n      checked: true\n    }\n  ]);\n\n  const onInsertToggle = () => {\n    if (selectedTodo) {\n      setSelectedTodo(null);\n    }\n    setInsertToggle(prev => !prev);\n  };\n\n  const onInsertTodo = (text) => {\n    if (text === \"\") { // 만약 텍스트입력에 빈칸이 들어왔을때\n      return alert(\"할 일을 입력해주세요.\");\n    }else {\n      const todo = {\n        id: nextId,\n        text,\n        checked: false\n      };\n      setTodos(todos => todos.concat(todo));\n      nextId++;\n    }\n  };\n\n  const onCheckToggle = (id) => {\n    setTodos(todos =>\n      todos.map(todo =>\n        todo.id === id ? { ...todo, checked: !todo.checked } : todo\n      )\n    );\n  };\n\n  const onChangeSelectedTodo = todo => {\n    setSelectedTodo(todo);\n  };\n\n  const onRemove = id => {\n    onInsertToggle();\n    setTodos(todos => todos.filter(todo => todo.id !== id))\n  }\n\n  const onUpdate = (id, text)\n\n  return (\n    <Template todoLength={todos.length}>\n      <TodoList \n        todos={todos} \n        onCheckToggle={onCheckToggle} \n        onInsertToggle={onInsertToggle}\n        onChangeSelectedTodo={onChangeSelectedTodo}\n        />\n      <div className=\"add-todo-button\" onClick={onInsertToggle}>\n        <MdAddCircle/>\n      </div>\n      {insertToggle && (\n      <TodoInsert\n        selectedTodo={selectedTodo}\n        onInsertToggle={onInsertToggle}\n        onInsertTodo={onInsertTodo}\n        onRemove={onRemove}\n        />\n      )}\n    </Template>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}